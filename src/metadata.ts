/* eslint-disable */
export default async () => {
    const t = {
        ["./service/prod/entities/prod.entity"]: await import("./service/prod/entities/prod.entity"),
        ["./common/core/constants/enums"]: await import("./common/core/constants/enums"),
        ["./service/prod/entities/sku.entity"]: await import("./service/prod/entities/sku.entity"),
        ["./service/shopcart/entities/shopcart-item.entity"]: await import("./service/shopcart/entities/shopcart-item.entity"),
        ["./service/prod/entities/prod-category.entity"]: await import("./service/prod/entities/prod-category.entity"),
        ["./service/prod/entities/prod-cate-attr.entity"]: await import("./service/prod/entities/prod-cate-attr.entity"),
        ["./service/prod/enums/prod.enum"]: await import("./service/prod/enums/prod.enum"),
        ["./service/prod/entities/prod-attrvalue.entity"]: await import("./service/prod/entities/prod-attrvalue.entity"),
        ["./service/prod/dtos/prod-sku-select.dto"]: await import("./service/prod/dtos/prod-sku-select.dto"),
        ["./common/database/constants"]: await import("./common/database/constants"),
        ["./service/order/entities/order.entity"]: await import("./service/order/entities/order.entity"),
        ["./service/order/enums/order.enum"]: await import("./service/order/enums/order.enum"),
        ["./service/order/entities/order-addr.entity"]: await import("./service/order/entities/order-addr.entity"),
        ["./service/order/entities/order-item.entity"]: await import("./service/order/entities/order-item.entity"),
        ["./service/order/dtos/checkout-sku.dto"]: await import("./service/order/dtos/checkout-sku.dto"),
        ["./service/user/entities/user-addr.entity"]: await import("./service/user/entities/user-addr.entity"),
        ["./service/order/dtos/buynow-sku.dto"]: await import("./service/order/dtos/buynow-sku.dto")
    };
    return { "@nestjs/swagger": { "models": [[import("./service/prod/entities/prod-attrvalue.entity"), { "ProdAttrvalue": { attrValueId: { required: true, type: () => String }, attrId: { required: true, type: () => String, nullable: true }, attrName: { required: true, type: () => String, nullable: true }, attrValueName: { required: true, type: () => String, nullable: true }, prod: { required: true, type: () => t["./service/prod/entities/prod.entity"].Prod }, createTime: { required: true, type: () => Date }, updateTime: { required: true, type: () => Date }, status: { required: true, enum: t["./common/core/constants/enums"].CommonStatus } } }], [import("./service/shopcart/entities/shopcart-item.entity"), { "ShopcartItem": { shopcartItemId: { required: true, type: () => String }, prod: { required: true, type: () => t["./service/prod/entities/prod.entity"].Prod }, sku: { required: true, type: () => t["./service/prod/entities/sku.entity"].Sku }, skuId: { required: true, type: () => String }, prodId: { required: true, type: () => String }, userId: { required: true, type: () => String }, itemCount: { required: true, type: () => Number }, addDate: { required: true, type: () => Date } } }], [import("./service/prod/entities/sku.entity"), { "Sku": { skuId: { required: true, type: () => String }, prod: { required: true, type: () => t["./service/prod/entities/prod.entity"].Prod }, prodId: { required: true, type: () => String }, oriPrice: { required: true, type: () => String, nullable: true }, price: { required: true, type: () => String, nullable: true }, stocks: { required: true, type: () => Number }, actualStocks: { required: true, type: () => Number, nullable: true }, createTime: { required: true, type: () => Date }, updateTime: { required: true, type: () => Date }, pic: { required: true, type: () => String, nullable: true }, skuName: { required: true, type: () => String, nullable: true }, prodName: { required: true, type: () => String, nullable: true }, version: { required: true, type: () => Number }, status: { required: true, enum: t["./common/core/constants/enums"].CommonStatus }, isDelete: { required: true, nullable: true, enum: t["./common/core/constants/enums"].DeleteStatus }, attr: { required: true, type: () => String }, shopcartItems: { required: true, type: () => [t["./service/shopcart/entities/shopcart-item.entity"].ShopcartItem] } } }], [import("./service/prod/entities/prod-cate-attr.entity"), { "ProdCateAttr": { attrId: { required: true, type: () => String }, prodCategory: { required: true, type: () => t["./service/prod/entities/prod-category.entity"].ProdCategory }, attrName: { required: true, type: () => String }, createTime: { required: true, type: () => Date }, updateTime: { required: true, type: () => Date }, status: { required: true, enum: t["./common/core/constants/enums"].CommonStatus } } }], [import("./service/prod/entities/prod-category.entity"), { "ProdCategory": { categoryId: { required: true, type: () => String }, parentId: { required: true, type: () => String }, categoryName: { required: true, type: () => String }, icon: { required: true, type: () => String, nullable: true }, pic: { required: true, type: () => String, nullable: true }, seq: { required: true, type: () => Number }, status: { required: true, enum: t["./common/core/constants/enums"].CommonStatus }, recTime: { required: true, type: () => Date }, grade: { required: true, type: () => Number }, createTime: { required: true, type: () => Date }, updateTime: { required: true, type: () => Date }, deleteTime: { required: true, type: () => Date }, prods: { required: true, type: () => [t["./service/prod/entities/prod.entity"].Prod] }, prodCateAttrs: { required: true, type: () => [t["./service/prod/entities/prod-cate-attr.entity"].ProdCateAttr] } } }], [import("./service/prod/entities/prod.entity"), { "Prod": { prodId: { required: true, type: () => String }, prodName: { required: true, type: () => String }, oriPrice: { required: true, type: () => String, nullable: true }, price: { required: true, type: () => String, nullable: true }, costPrice: { required: true, type: () => String, nullable: true }, brief: { required: true, type: () => String, nullable: true }, content: { required: true, type: () => String, nullable: true }, pic: { required: true, type: () => String, nullable: true }, imgs: { required: true, type: () => String, nullable: true }, status: { required: true, enum: t["./service/prod/enums/prod.enum"].ProdStatus }, categoryId: { required: true, type: () => String, nullable: true }, category: { required: true, type: () => t["./service/prod/entities/prod-category.entity"].ProdCategory }, soldNum: { required: true, type: () => Number, nullable: true }, totalStocks: { required: true, type: () => Number, nullable: true }, returnNum: { required: true, type: () => Number, nullable: true }, deliveryTemplateId: { required: true, type: () => String, nullable: true }, createTime: { required: true, type: () => Date }, updateTime: { required: true, type: () => Date }, putawayTime: { required: true, type: () => Date, nullable: true }, version: { required: true, type: () => Number, nullable: true }, contentImg: { required: true, type: () => String, nullable: true }, prodAttrValues: { required: true, type: () => [t["./service/prod/entities/prod-attrvalue.entity"].ProdAttrvalue] }, skus: { required: true, type: () => [t["./service/prod/entities/sku.entity"].Sku] }, shopcartItems: { required: true, type: () => [t["./service/shopcart/entities/shopcart-item.entity"].ShopcartItem] } } }], [import("./service/prod/entities/prod-tag.entity"), { "ProdTag": { id: { required: true, type: () => String }, title: { required: true, type: () => String, nullable: true }, status: { required: true, enum: t["./common/core/constants/enums"].CommonStatus }, isDefault: { required: true, type: () => Boolean, nullable: true }, prodCount: { required: true, type: () => String, nullable: true }, style: { required: true, type: () => Number, nullable: true }, seq: { required: true, type: () => Number, nullable: true }, createTime: { required: true, type: () => Date }, updateTime: { required: true, type: () => Date }, deleteTime: { required: true, type: () => Date }, prods: { required: true, type: () => [t["./service/prod/entities/prod.entity"].Prod] } } }], [import("./service/prod/dtos/prod-sku-select.dto"), { "ProdSkuSelectDTO": { attrSkuMap: { required: true }, attrvalueMap: { required: true } } }], [import("./service/prod/dtos/prod-detail.dto"), { "ProdDetailDTO": { prodId: { required: true, type: () => String }, prodName: { required: true, type: () => String }, oriPrice: { required: true, type: () => String, nullable: true }, price: { required: true, type: () => String, nullable: true }, costPrice: { required: true, type: () => String, nullable: true }, brief: { required: true, type: () => String, nullable: true }, content: { required: true, type: () => String, nullable: true }, pic: { required: true, type: () => String, nullable: true }, imgs: { required: true, type: () => String, nullable: true }, status: { required: true, enum: t["./service/prod/enums/prod.enum"].ProdStatus }, categoryId: { required: true, type: () => String, nullable: true }, soldNum: { required: true, type: () => Number, nullable: true }, totalStocks: { required: true, type: () => Number, nullable: true }, returnNum: { required: true, type: () => Number, nullable: true }, deliveryTemplateId: { required: true, type: () => String, nullable: true }, version: { required: true, type: () => Number, nullable: true }, contentImg: { required: true, type: () => String, nullable: true }, skus: { required: true, type: () => [t["./service/prod/entities/sku.entity"].Sku] }, prodSkuSelectDTO: { required: true, type: () => t["./service/prod/dtos/prod-sku-select.dto"].ProdSkuSelectDTO } } }], [import("./common/restful/dtos/delete.dto"), { "DeleteDto": { ids: { required: true, type: () => [String], description: "\u5F85\u5220\u9664\u6570\u636E\u7684ID\u5217\u8868" } } }], [import("./common/restful/dtos/delete-with-trash.dto"), { "DeleteWithTrashDto": { trash: { required: false, type: () => Boolean, description: "\u662F\u5426\u8F6F\u5220\u9664" } }, "RestoreDto": { ids: { required: true, type: () => [String], description: "\u5F85\u6062\u590D\u6570\u636E\u7684ID\u5217\u8868" } } }], [import("./common/restful/dtos/paginate.dto"), { "PaginateDto": { page: { required: false, type: () => Number, description: "\u5F53\u524D\u9875", default: 1 }, limit: { required: false, type: () => Number, description: "\u6BCF\u9875\u6570\u636E\u91CF", default: 10 } } }], [import("./common/restful/dtos/paginate-width-trashed.dto"), { "PaginateWithTrashedDto": { trashed: { required: false, description: "\u6839\u636E\u8F6F\u5220\u9664\u72B6\u6001\u67E5\u8BE2", enum: t["./common/database/constants"].SelectTrashMode } } }], [import("./service/prod/dtos/get-categoty-prod.dto"), { "GetCategoryProdDTO": { categoryId: { required: true, type: () => String, description: "\u5206\u7C7BID" } } }], [import("./service/user/entities/user.entity"), { "User": { userId: { required: true, type: () => String }, nickName: { required: true, type: () => String, nullable: true }, realName: { required: true, type: () => String, nullable: true }, userMail: { required: true, type: () => String, nullable: true }, loginPassword: { required: true, type: () => String, nullable: true }, payPassword: { required: true, type: () => String, nullable: true }, userMobile: { required: true, type: () => String, nullable: true }, modifyTime: { required: true, type: () => Date }, userRegtime: { required: true, type: () => Date }, userRegip: { required: true, type: () => String, nullable: true }, userLasttime: { required: true, type: () => Date, nullable: true }, userLastip: { required: true, type: () => String, nullable: true }, userMemo: { required: true, type: () => String, nullable: true }, sex: { required: true, type: () => String, nullable: true }, birthDate: { required: true, type: () => String, nullable: true }, pic: { required: true, type: () => String, nullable: true }, status: { required: true, type: () => Number }, score: { required: true, type: () => Number, nullable: true }, openId: { required: true, type: () => String, nullable: true }, unionId: { required: true, type: () => String, nullable: true }, userWechat: { required: true, type: () => String, nullable: true } } }], [import("./service/user/entities/user-addr.entity"), { "UserAddr": { addrId: { required: true, type: () => String }, userId: { required: true, type: () => String }, receiver: { required: true, type: () => String, nullable: true }, provinceId: { required: true, type: () => String, nullable: true }, province: { required: true, type: () => String, nullable: true }, city: { required: true, type: () => String, nullable: true }, cityId: { required: true, type: () => String, nullable: true }, area: { required: true, type: () => String, nullable: true }, areaId: { required: true, type: () => String, nullable: true }, postCode: { required: true, type: () => String, nullable: true }, addr: { required: true, type: () => String, nullable: true }, mobile: { required: true, type: () => String, nullable: true }, status: { required: true, type: () => Number }, commonAddr: { required: true, type: () => Number }, createTime: { required: true, type: () => Date }, version: { required: true, type: () => Number }, updateTime: { required: true, type: () => Date } } }], [import("./service/user/dtos/wx-authentication.dto"), { "WxAuthenticationDTO": { code: { required: true, type: () => String } } }], [import("./service/user/dtos/wx-session.dto"), { "WxSessionDTO": { openid: { required: true, type: () => String }, session_key: { required: true, type: () => String } } }], [import("./service/user/dtos/token-info.dto"), { "TokenInfoDTO": { accessToken: { required: true, type: () => String }, expiresIn: { required: true, type: () => Number } } }], [import("./service/shopcart/dtos/change-shopcart.dto"), { "ChangeShopcartDTO": { shopcartItemId: { required: true, type: () => String }, prodId: { required: true, type: () => String }, skuId: { required: true, type: () => String }, itemCount: { required: true, type: () => Number } } }], [import("./service/shopcart/dtos/shopcart-amount.dto"), { "ShopcartAmountDTO": { totalPay: { required: true, type: () => String }, totalItemsCount: { required: true, type: () => Number } } }], [import("./service/shopcart/dtos/total-pay.dto"), { "TotalPayDTO": { shopcartItemIds: { required: true } } }], [import("./service/shopcart/dtos/delete-shopcart.dto"), { "DeleteShopcartDTO": { shopcartItemIds: { required: true, type: () => [String] } } }], [import("./service/order/entities/order-addr.entity"), { "OrderAddr": { orderAddrId: { required: true, type: () => String }, addrId: { required: true, type: () => String }, userId: { required: true, type: () => String }, receiver: { required: true, type: () => String, nullable: true }, provinceId: { required: true, type: () => String, nullable: true }, province: { required: true, type: () => String, nullable: true }, areaId: { required: true, type: () => String, nullable: true }, area: { required: true, type: () => String, nullable: true }, cityId: { required: true, type: () => String, nullable: true }, city: { required: true, type: () => String, nullable: true }, addr: { required: true, type: () => String, nullable: true }, postCode: { required: true, type: () => String, nullable: true }, mobile: { required: true, type: () => String, nullable: true }, createTime: { required: true, type: () => Date }, version: { required: true, type: () => Number }, order: { required: true, type: () => t["./service/order/entities/order.entity"].Order } } }], [import("./service/order/entities/order.entity"), { "Order": { orderId: { required: true, type: () => String }, orderNumber: { required: true, type: () => String }, totalCount: { required: true, type: () => Number, nullable: true }, userId: { required: true, type: () => String }, totalPay: { required: true, type: () => String }, payType: { required: true, enum: t["./service/order/enums/order.enum"].PayType }, buyerRemark: { required: true, type: () => String, nullable: true }, status: { required: true, enum: t["./service/order/enums/order.enum"].OrderStatus }, transfee: { required: true, type: () => String, nullable: true }, orderAddrId: { required: true, type: () => String, nullable: true }, orderAddr: { required: true, type: () => t["./service/order/entities/order-addr.entity"].OrderAddr }, createTime: { required: true, type: () => Date }, updateTime: { required: true, type: () => Date, nullable: true }, payTime: { required: true, type: () => Date, nullable: true }, dvyTime: { required: true, type: () => Date, nullable: true }, finallyTime: { required: true, type: () => Date, nullable: true }, cancelTime: { required: true, type: () => Date, nullable: true }, isPayed: { required: true, enum: t["./service/order/enums/order.enum"].PayedStatus }, deleteStatus: { required: true, enum: t["./common/core/constants/enums"].DeleteStatus }, reduceAmount: { required: true, type: () => String, nullable: true }, closeType: { required: true, enum: t["./service/order/enums/order.enum"].OrderCloseType }, prodName: { required: true, type: () => String, nullable: true }, changePrice: { required: true, type: () => String, nullable: true }, userMobile: { required: true, type: () => String, nullable: true }, userWechat: { required: true, type: () => String, nullable: true }, orderItems: { required: true, type: () => [t["./service/order/entities/order-item.entity"].OrderItem] } } }], [import("./service/order/entities/order-item.entity"), { "OrderItem": { orderItemId: { required: true, type: () => String }, order: { required: true, type: () => t["./service/order/entities/order.entity"].Order }, orderId: { required: true, type: () => String }, orderNumber: { required: true, type: () => String }, prodId: { required: true, type: () => String }, skuId: { required: true, type: () => String }, itemCount: { required: true, type: () => Number }, prodName: { required: true, type: () => String }, skuName: { required: true, type: () => String, nullable: true }, pic: { required: true, type: () => String, nullable: true }, price: { required: true, type: () => String }, userId: { required: true, type: () => String }, totalPay: { required: true, type: () => String }, createTime: { required: true, type: () => Date }, commSts: { required: true, enum: t["./service/order/enums/order.enum"].OrderItemCommentStatus }, addShopcartDate: { required: true, type: () => Date, nullable: true }, aftersaleStatus: { required: true, type: () => Number }, deliveryStatus: { required: true, enum: t["./service/order/enums/order.enum"].OrderDeliveryStatus }, dvyFlowNumbers: { required: true, type: () => String, nullable: true } } }], [import("./service/order/entities/order-payment.entity"), { "OrderPayment": { paymentId: { required: true, type: () => String }, payNo: { required: true, type: () => String, nullable: true }, bizPayNo: { required: true, type: () => String, nullable: true }, orderNumber: { required: true, type: () => String, nullable: true }, payType: { required: true, enum: t["./service/order/enums/order.enum"].PayType }, payTypeName: { required: true, type: () => String, nullable: true }, totalPay: { required: true, type: () => String, nullable: true }, isClearing: { required: true, type: () => Number, nullable: true }, userId: { required: true, type: () => String, nullable: true }, createTime: { required: true, type: () => Date }, clearingTime: { required: true, type: () => Date, nullable: true }, version: { required: true, type: () => Number, nullable: true }, payStatus: { required: true, enum: t["./service/order/enums/order.enum"].PayedStatus } } }], [import("./service/order/dtos/get-checkout.dto"), { "GetCheckOutDTO": { addrId: { required: true, type: () => String } } }], [import("./service/order/dtos/checkout-sku.dto"), { "CheckOutSkuDTO": { shopcartItemId: { required: true, type: () => String }, prodId: { required: true, type: () => String }, skuId: { required: true, type: () => String }, prodName: { required: true, type: () => String }, itemCount: { required: true, type: () => Number }, skuName: { required: true, type: () => String }, pic: { required: true, type: () => String }, price: { required: true, type: () => String }, totalPay: { required: true, type: () => String }, addShopcartDate: { required: true, type: () => Date } } }], [import("./service/order/dtos/checkout.dto"), { "CheckOutDTO": { totalPay: { required: true, type: () => String }, totalCount: { required: true, type: () => Number }, checkOutSkuDTOs: { required: true, type: () => [t["./service/order/dtos/checkout-sku.dto"].CheckOutSkuDTO] }, buyerRemark: { required: true, type: () => String }, userAddr: { required: true, type: () => t["./service/user/entities/user-addr.entity"].UserAddr }, transfee: { required: true, type: () => String } } }], [import("./service/order/dtos/buynow-sku.dto"), { "BuynowSkuDTO": { prodId: { required: true, type: () => String }, skuId: { required: true, type: () => String }, itemCount: { required: true, type: () => Number } } }], [import("./service/order/dtos/buynow-get-checkout.dto"), { "BuynowGetCheckOutDTO": { buynowSkuDTO: { required: true, type: () => t["./service/order/dtos/buynow-sku.dto"].BuynowSkuDTO } } }], [import("./service/order/dtos/shopcart-get-checkout.dto"), { "ShopcartGetCheckOutDTO": { shopcartItemIds: { required: true } } }], [import("./service/order/dtos/get-order-page.dto"), { "GetOrderPageDTO": { status: { required: true, description: "\u8BA2\u5355\u72B6\u6001", enum: t["./service/order/enums/order.enum"].OrderStatus } } }], [import("./service/prod/dtos/prod-page-item.dto"), { "ProdPageItemDTO": { prodId: { required: true, type: () => String }, prodName: { required: true, type: () => String }, oriPrice: { required: true, type: () => String, nullable: true }, price: { required: true, type: () => String, nullable: true }, costPrice: { required: true, type: () => String, nullable: true }, brief: { required: true, type: () => String, nullable: true }, pic: { required: true, type: () => String, nullable: true }, imgs: { required: true, type: () => String, nullable: true }, status: { required: true, enum: t["./service/prod/enums/prod.enum"].ProdStatus }, categoryId: { required: true, type: () => String, nullable: true }, soldNum: { required: true, type: () => Number, nullable: true }, totalStocks: { required: true, type: () => Number, nullable: true }, returnNum: { required: true, type: () => Number, nullable: true }, deliveryTemplateId: { required: true, type: () => String, nullable: true }, prodSkuSelectDTO: { required: true, type: () => t["./service/prod/dtos/prod-sku-select.dto"].ProdSkuSelectDTO } } }]], "controllers": [[import("./modules/api/prod/controllers/prod-tag.controller"), { "ProdTagController": {} }], [import("./modules/api/prod/controllers/prod-category.controller"), { "ProdCategoryController": {} }], [import("./modules/api/prod/controllers/prod.controller"), { "ProdController": {} }], [import("./modules/api/user/controllers/auth.controller"), { "AuthController": {} }], [import("./modules/api/shopcart/controllers/shopcart-item.controller"), { "ShopcartItemController": {} }], [import("./modules/api/order/controllers/order.controller"), { "OrderController": {} }], [import("./modules/api/order/controllers/pay.controller"), { "PayController": {} }]] } };
};